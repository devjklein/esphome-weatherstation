esphome:
  name: weatherstation
  platform: ESP32
  board: esp32dev
  
substitutions:
  loc: "Roof"
  name: "Weather Station"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pw
  fast_connect: on
  manual_ip:
    static_ip: ###.###.###.###
    gateway: ###.###.###.###
    subnet: ###.###.###.###
  ap:
    ssid: ${name} Fallback
    password: !secret fallback_pw

captive_portal:

logger:
  #level: INFO

api:
  password: !secret api_pw

ota:
  password: !secret api_pw

sensor:
#
# Wind Speed
#
  - platform: pulse_meter
    pin: 
      number: GPIO14
      mode: INPUT_PULLUP
    name: '${loc} Windspeed Meter'
    icon: 'mdi:weather-windy'
    id: wind_meter
    unit_of_measurement: 'mph'
    accuracy_decimals: 1
    timeout: 5s
    filters:
      - multiply: 0.0124285 #1.492mph per rotation so 1 / 60 / 2 * 1.491424
      - sliding_window_moving_average: # Helps prevent too many datapoints
          window_size: 15
          send_every: 15
                
#  - platform: template
#    name: '${loc} Windspeed'
#    icon: 'mdi:weather-windy'
#    id: wind_meter_avg
#    lambda: return id(wind_meter).state;
#    unit_of_measurement: 'mph'
#    update_interval: 1min
#    filters:
#      - throttle_average: 1min
# This method was used for Beaufort until I moved to HASS statistics for my averages.
#    on_value:
#      lambda: |-
#        if (id(wind_meter_avg).state < 1) {
#          id(wind_scale).publish_state("Calm");
#        } else if (id(wind_meter_avg).state > 0 && id(wind_meter_avg).state < 4) {
#          id(wind_scale).publish_state("Light Air");
#        } else if (id(wind_meter_avg).state > 3 && id(wind_meter_avg).state < 8) {
#          id(wind_scale).publish_state("Light Breeze");
#        } else if (id(wind_meter_avg).state > 7 && id(wind_meter_avg).state < 13) {
#          id(wind_scale).publish_state("Gentle Breeze");
#        } else if (id(wind_meter_avg).state > 12 && id(wind_meter_avg).state < 19) {
#          id(wind_scale).publish_state("Moderate Breeze");
#        } else if (id(wind_meter_avg).state > 18 && id(wind_meter_avg).state < 25) {
#          id(wind_scale).publish_state("Fresh Breeze");
#        } else if (id(wind_meter_avg).state > 24 && id(wind_meter_avg).state < 32) {
#          id(wind_scale).publish_state("Strong Breeze");
#        } else if (id(wind_meter_avg).state > 31 && id(wind_meter_avg).state < 39) {
#          id(wind_scale).publish_state("Near Gale");
#        } else if (id(wind_meter_avg).state > 38 && id(wind_meter_avg).state < 47) {
#          id(wind_scale).publish_state("Gale");
#        } else if (id(wind_meter_avg).state > 46 && id(wind_meter_avg).state < 55) {
#          id(wind_scale).publish_state("Severe Gale");
#        } else if (id(wind_meter_avg).state > 54 && id(wind_meter_avg).state < 64) {
#          id(wind_scale).publish_state("Storm");
#        } else if (id(wind_meter_avg).state > 63 && id(wind_meter_avg).state < 73) {
#          id(wind_scale).publish_state("Violent Storm");
#        } else if (id(wind_meter_avg).state > 72) {
#          id(wind_scale).publish_state("Hurricane Force");
#        } else {
#          id(wind_scale).publish_state("");
#        }
#
# Pulse counter style wind meter; less data resolution.
# - platform: pulse_counter
#    pin:
#      number: GPIO14
#      mode: INPUT_PULLUP
#    unit_of_measurement: 'mph'
#    accuracy_decimals: 0
#    name: '${loc} Windspeed'
#    icon: 'mdi:weather-windy'
#    id: wind_sensor
#    count_mode:
#      rising_edge: DISABLE
#      falling_edge: INCREMENT
#    internal_filter: 13us
#    update_interval: 60s
#    filters:
#      # - sliding_window_moving_average:
#      #     window_size: 4
#      #     send_every: 1
#      - multiply: 0.0124285
#
# Rainfall
#
  - platform: pulse_meter
    pin:
      number: GPIO32
      mode: INPUT_PULLUP
    name: "${loc} rainfall per min"
    id: rain_meter
    icon: "mdi:weather-rainy"
    internal_filter: 500ms # Due to bug with pulse_meter counting rising and falling edges.
    timeout: 1min
    unit_of_measurement: "in"
    accuracy_decimals: 2
    filters:
      - multiply: 0.0204 # Calibration
    total:
      name: "${loc} Total Daily Rainfall"
      icon: "mdi:beaker-outline"
      unit_of_measurement: "in"
      accuracy_decimals: 2
      filters:
      - multiply: 0.0204 # Calibration
#
# Wind Direction
#
  - platform: adc
    id: adc_sensor
    attenuation: 11db
    pin: GPIO35
    name: ADC
    internal: true
    update_interval: 5s
    filters:
      - offset: 0.023 # Calibration
    accuracy_decimals: 3 ##IMPORTANT to get resolution for resistance sensor
    
### ADD WIND CARIDNAL DIRECTION
### Your values may differ!
# Direction -- Resistance -- ADC Voltage
# TODO:
# N -- 33KΩ -- 2.56v
# NE -- 8.2KΩ -- 1.5v
# E -- 1KΩ -- 0.30v
# SE -- 2.2KΩ -- 0.6v
# S -- 3.9KΩ -- 0.93v
# SW -- 16KΩ -- 2.05v
# W -- 120KΩ -- 3.07v
# NW -- 64.9KΩ -- 2.89v
  - platform: resistance
    sensor: adc_sensor
    id: resistance_sensor
    configuration: DOWNSTREAM
    resistor: 10kOhm
    internal: true
    name: Resistance Sensor
    accuracy_decimals: 1
    #filters:
      #- heartbeat: 90s
    on_value:
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 30000
              below: 50000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "N"
            - sensor.template.publish:
                id: wind_heading
                state: 0.0
                
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 5000
              below: 10000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "NE"         
            - sensor.template.publish:
                id: wind_heading
                state: 45.0            
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 500
              below: 1500
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "E"                
            - sensor.template.publish:
                id: wind_heading
                state: 90.0          
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 1500
              below: 3000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "SE"    
            - sensor.template.publish:
                id: wind_heading
                state: 135.0             
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 3000
              below: 5000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "S"    
            - sensor.template.publish:
                id: wind_heading
                state: 180.0            
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 10000
              below: 30000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "SW"    
            - sensor.template.publish:
                id: wind_heading
                state: 225.0              
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 110000
              below: 140000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "W"    
            - sensor.template.publish:
                id: wind_heading
                state: 270.0          
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 50000
              below: 80000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "NW"    
            - sensor.template.publish:
                id: wind_heading
                state: 315.0

  - platform: template
    name: "${loc} Wind Heading"
    icon: 'mdi:compass-rose'
    id: wind_heading
    unit_of_measurement: "°"
    accuracy_decimals: 0
    update_interval: never
  - platform: wifi_signal
    name: ${loc} Signal
    update_interval: 60s
    
text_sensor:
  - platform: template
    name: "${loc} Wind Cardinal Direction"
    icon: "mdi:windsock"
    id: wind_dir_card
    update_interval: never
    
#  - platform: template
#    name: '${loc} Beaufort Wind Scale'
#    icon: 'mdi:tailwind'
#    id: wind_scale
#    update_interval: never

button:
  - platform: template
    name: "${loc} Reset Total Daily Rainfall"
    icon: "mdi:beaker-remove-outline"
    on_press:
      then:
        - pulse_meter.set_total_pulses:
              id: rain_meter
              value: 0
    
time:
  - platform: homeassistant
    id: esptime
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - pulse_meter.set_total_pulses:
              id: rain_meter
              value: 0